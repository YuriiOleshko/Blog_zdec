{"version":3,"sources":["redux/reducer/index.js","redux/reducer/requestReducer.js","redux/reducer/messageReducer.js","redux/store/store.js","redux/action/requestAction.js","redux/api/api.js","redux/action/messageAction.js","MainPage/MainPage.jsx","Мessage/Мessage.jsx","App.js","serviceWorker.js","index.js"],"names":["rootReducer","combineReducers","blog","state","arguments","length","undefined","action","type","console","log","data","Object","toConsumableArray","message","objectSpread","com","comments","concat","DevTools","window","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","rootReducers","compose","applyMiddleware","thunk","fetchData","dispatch","axios","get","then","catch","err","addInfoToBlog","pushComment","openMes","id","getMessenge","messege","MainPage","showPosts","event","target","_this","props","this","fetch","_this2","react_default","a","createElement","className","map","el","key","title","userName","body","author","date","NavLink","to","onClick","Component","protoTypes","connect","Messenge","isLoading","value","Load","showComment","setState","prev","handelChange","ev","preventDefault","addCommet","val","pop","Date","newDate","toLocaleString","String","comment","openArea","_this$state","uuid4","name","cols","rows","onChange","App","Switch","Route","exact","path","component","Мessage","withRouter","Boolean","location","hostname","match","ReactDOM","render","react_redux_es","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gSAIA,IAKeA,EALIC,YAAgB,CACnCC,KCLe,WAAiC,IAAlBC,EAAkBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAZ,GAAIG,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC5C,OAAQC,EAAOC,MACX,IAAK,aAED,OADJC,QAAQC,IAAIH,EAAOI,MACRC,OAAAC,EAAA,EAAAD,CAAIL,EAAOI,KAAKA,MAC3B,QACI,OAAOR,IDAnBW,QENe,WAAiC,IAAhBX,EAAgBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAV,GAAGG,EAAOH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAExC,OAAQC,EAAOC,MACX,IAAK,UAEL,OADAC,QAAQC,IAAIH,EAAOI,MACZC,OAAAG,EAAA,EAAAH,CAAA,GAAIL,EAAOI,KAAKA,MACvB,IAAK,aAEL,IAAIK,EAAGJ,OAAAC,EAAA,EAAAD,CAAMT,EAAMc,UAAZC,OAAA,CAAuBX,EAAOI,OAErC,OADIF,QAAQC,IAAIM,GACTJ,OAAAG,EAAA,EAAAH,CAAA,GAAIT,EAAX,CAAkBc,SAAUD,IACxB,QACA,OAAOb,cCRjBgB,EAAWC,OAAOC,8BAAgCD,OAAOC,+BAKhDC,EAJDC,YAAYC,EAAcC,YAAQC,YAAgBC,KAAQR,0HCIhE,IAAMS,EAAY,kBAAM,SAAAC,GAC3B,OCJDC,IAAMC,IAAI,0CACTC,KAAK,SAAArB,GAAI,OAAIF,QAAQC,IAAIC,KACzBsB,MAAM,SAAAC,GAAG,OAAGzB,QAAQC,IAAIwB,KAElBJ,IAAMC,IAAI,4CDEfC,KAAK,SAAArB,GAAI,OAAIkB,EAVX,SAAuBlB,GAC1B,MAAO,CACHH,KAAM,aACNG,QAOmBwB,CAAcxB,MACpCsB,MAAM,SAAAC,GAAG,OAAGzB,QAAQC,IAAIwB,OENjBE,EAAc,SAACzB,GAAD,MAAW,CAClCH,KAAM,aACNG,SAOS0B,EAAU,SAACC,GAAD,OAAQ,SAAAT,GAC3B,ODHG,SAAqBS,GAEpB,OAAOR,IAAMC,IAAN,0CAAAb,OAAoDoB,EAApD,qBCCJC,CAAYD,GAClBN,KAAK,SAAArB,GAAI,OAAIkB,EAjBK,SAAClB,GAAD,MAAW,CAC9BH,KAAM,UAENG,QAcuB6B,CAAQ7B,MAC9BsB,MAAM,SAAAC,GAAG,OAAGzB,QAAQC,IAAIwB,OCXtBO,6MASDC,UAAY,SAACC,GACX,IAAIL,EAAGK,EAAMC,OAAON,GACpBO,EAAKC,MAAMT,QAAQC,GAEnB7B,QAAQC,IAAI4B,uFARZS,KAAKD,MAAME,QAEXvC,QAAQC,IAAI,0CAQT,IAAAuC,EAAAF,KACP,OACIG,EAAAC,EAAAC,cAAA,WAC6B,IAA3BL,KAAKD,MAAM5C,KAAKG,OAAe6C,EAAAC,EAAAC,cAAA,sBACvBF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXN,KAAKD,MAAM5C,KAAKoD,IAAI,SAAAC,GAAE,OACtBL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAQG,IAAKD,EAAGE,OAE3BP,EAAAC,EAAAC,cAAA,UAAKG,EAAGE,OACRP,EAAAC,EAAAC,cAAA,UAAKG,EAAGG,UACRR,EAAAC,EAAAC,cAAA,SAAIG,EAAGI,MACLT,EAAAC,EAAAC,cAAA,SAAIG,EAAGK,QACPV,EAAAC,EAAAC,cAAA,SAAIG,EAAGM,MACPX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAUC,GAAE,UAAA7C,OAAYqC,EAAGjB,KAAOY,EAAAC,EAAAC,cAAA,KAAGd,GAAIiB,EAAGjB,GAAIe,UAAU,UAAUW,QAASf,EAAKP,WAAhD,8BA5BtCuB,aAmDxBxB,EAASyB,WAAa,GAyBLC,kBAhCjB,SAA0BhE,GACtB,MAAO,CACHD,KAAMC,EAAMD,KACZY,QAAQX,EAAMW,UAQpB,SAA6Be,GAC3B,MAAO,CACHmB,MAAO,WACLnB,EAASD,MAEXS,QAAS,SAASC,GACdT,EAASQ,EAAQC,OAeZ6B,CAAgD1B,4BC9E3D2B,6MACFjE,MAAM,CACFkE,WAAU,EACVC,MAAM,GACNC,MAAK,KAUTC,YAAY,WACR3B,EAAK4B,SAAS,SAAAC,GAAI,MAAG,CACjBL,WAAWK,EAAKL,gBAGxBM,aAAa,SAACC,GACVA,EAAGC,iBACHhC,EAAK4B,SAAS,CAACH,MAAOM,EAAGhC,OAAO0B,WAEpCQ,UAAU,SAACF,GACPA,EAAGC,iBACH,IAAIE,EAAIlC,EAAK1C,MAAMmE,MAEhBU,EAAI,IAAIC,KACRC,EAAQF,EAAIG,iBAChB1E,QAAQC,IAAI0E,OAAOJ,IACnBvE,QAAQC,IAAI0E,OAAOF,IAClB,IAAIG,EAAQ,CAAC1B,KAAKoB,EACFlB,KAAMuB,OAAOF,GACjB5C,GAAG8C,OAAOF,IACtBzE,QAAQC,IAAI2E,GACZxC,EAAKC,MAAM7B,SAASoE,GACpBxC,EAAK4B,SAAS,CAACH,MAAO,QAE1BgB,SAAS,gGA/BL7E,QAAQC,IAAIqC,KAAKD,MAAMhC,SACpBiC,KAAKD,MAAMhC,SACViC,KAAK0B,SAAS,CACVF,MAAK,qCA+BR,IAAAgB,EACuBxC,KAAK5C,MAA3BkE,EADDkB,EACClB,UAAUE,EADXgB,EACWhB,KAAKD,EADhBiB,EACgBjB,MACrB,OAEIpB,EAAAC,EAAAC,cAAA,WACKmB,EAAOrB,EAAAC,EAAAC,cAAA,oBAERF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACTH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAYG,IAAKT,KAAKD,MAAMhC,QAAQ2C,OACnDP,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAASC,GAAG,KAAZ,IAAkBb,EAAAC,EAAAC,cAAA,UAAQC,UAAU,OAAlB,iBAEdH,EAAAC,EAAAC,cAAA,UAAKL,KAAKD,MAAMhC,QAAQ2C,OACxBP,EAAAC,EAAAC,cAAA,UAAKL,KAAKD,MAAMhC,QAAQ4C,UACxBR,EAAAC,EAAAC,cAAA,SAAIL,KAAKD,MAAMhC,QAAQ6C,MACrBT,EAAAC,EAAAC,cAAA,SAAIL,KAAKD,MAAMhC,QAAQ8C,QACvBV,EAAAC,EAAAC,cAAA,SAAIL,KAAKD,MAAMhC,QAAQ+C,MACvBX,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAcW,QAASjB,KAAKyB,aAAzC,mBACEH,EAAY,KACdtB,KAAKD,MAAMhC,QAAQG,SAASqC,IAAI,SAAAC,GAAE,OAAGL,EAAAC,EAAAC,cAAA,OAAKI,IAAKgC,MAASnC,UAAU,WAAUH,EAAAC,EAAAC,cAAA,SAAIG,EAAGI,MAAST,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAQE,EAAGM,UAGnHX,EAAAC,EAAAC,cAAA,QAAM7C,OAAO,IACd2C,EAAAC,EAAAC,cAAA,YAAUqC,KAAK,GAAGnD,GAAG,GAAGoD,KAAK,KAAKC,KAAK,KAAKC,SAAU7C,KAAK4B,aAAcL,MAAOA,IAChFpB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASW,QAASjB,KAAK+B,WAAzC,yBAjELb,aAyFRE,kBAZf,SAA0BhE,GACtB,MAAO,CACHD,KAAMC,EAAMD,KACZY,QAAQX,EAAMW,UAGpB,SAA6Be,GAC3B,MAAO,CACHZ,SAAU,SAASoE,GACfxD,EAASO,EAAYiD,OAGlBlB,CAA+CC,GCvFxDyB,mLAIF,OACE3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEdH,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,KACE5C,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,cAAcC,UAAWzD,IAE3CS,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAOE,KAAI,uBAA0BC,UAAWC,aAVvClC,aAqBDmC,cAAYP,GCjBTQ,QACW,cAA7BjF,OAAOkF,SAASC,UAEe,UAA7BnF,OAAOkF,SAASC,UAEhBnF,OAAOkF,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CAAUrF,MAAOA,GACzB4B,EAAAC,EAAAC,cAACwD,EAAA,EAAD,KACI1D,EAAAC,EAAAC,cAACyD,EAAD,QAEKC,SAASC,eAAe,SDoHnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlF,KAAK,SAAAmF,GACjCA,EAAaC","file":"static/js/main.e73ad79f.chunk.js","sourcesContent":["import { combineReducers } from 'redux' ;\r\nimport blog from './requestReducer';\r\nimport message from './messageReducer.js'\r\n\r\nconst rootReducer= combineReducers({\r\nblog,\r\nmessage,\r\n\r\n})\r\nexport default rootReducer ;","export default function blog (state=[], action) {\r\n    switch (action.type) {\r\n        case 'DOWNLOADED':\r\n        console.log(action.data)\r\n            return [...action.data.data];\r\n        default: \r\n            return state;\r\n    }\r\n}","export default function message(state={},action){\r\n  \r\n        switch (action.type) {\r\n            case \"message\":\r\n            console.log(action.data)\r\n            return {...action.data.data};\r\n            case \"addComment\":\r\n        //     console.log(state.comments,)\r\n            let com =[...state.comments,  action.data]\r\n                console.log(com)\r\n            return {...state, comments: com}\r\n                default:\r\n                return state;\r\n        }\r\n    \r\n}","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport rootReducers from '../reducer/index';\r\nimport thunk from 'redux-thunk'\r\n\r\nconst DevTools = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\r\nconst store = createStore(rootReducers, compose(applyMiddleware(thunk), DevTools));\r\n\r\n\r\n\r\nexport default store;","import {getBase} from '../api/api'\r\n\r\n export function addInfoToBlog(data) {\r\n     return {\r\n         type: 'DOWNLOADED',\r\n         data,\r\n     }\r\n }\r\n\r\n export const fetchData = () => dispatch => {\r\n     return getBase()\r\n    //  .then(data=> console.log(data))\r\n     .then(data => dispatch(addInfoToBlog(data)))\r\n     .catch(err=> console.log(err))\r\n }\r\n \r\n\r\n// function createFullBlog(data){\r\n//     let posts = data[0].data;\r\n//     let userName = data[1].data\r\n//     let comments = data[2].data\r\n\r\n//     // console.log (posts)\r\n//     // console.log(userName)\r\n//     // console.log(comments)\r\n\r\n//     let result = posts.map(el => ({title:el.title, body:el.body, userName: userName.filter(name => name.id === el.userId ? el : null)[0].name, comments: comments.filter((com) => com.postId === el.id).length  }))\r\n\r\n//     // console.log(result)\r\n\r\n//     return result\r\n// }\r\n","import axios from 'axios';\r\n\r\n\r\n\r\nexport function getBase() {\r\n\r\n    axios.get('https://simple-blog-api.crew.red/posts')\r\n    .then(data => console.log(data))\r\n    .catch(err=> console.log(err))\r\n\r\n    return axios.get(' https://simple-blog-api.crew.red/posts')\r\n}\r\n\r\n\r\nexport function getMessenge(id) {\r\n\r\n        return axios.get(`https://simple-blog-api.crew.red/posts/${id}?_embed=comments`)\r\n}\r\n\r\n","import {getMessenge} from '../api/api'\r\nexport const messege = (data) => ({\r\n    type: 'message',\r\n\r\n    data,\r\n   \r\n})\r\nexport const pushComment = (data) => ({\r\n    type: 'addComment',\r\n    data,\r\n   \r\n})\r\n// export const pushComment = (data) => dispatch => {\r\n//     return dispatch(addComment(data))\r\n// }\r\n\r\nexport const openMes = (id) => dispatch => {\r\n    return getMessenge(id)\r\n    .then(data => dispatch(messege(data)))\r\n    .catch(err=> console.log(err))\r\n}","import React, { Component } from 'react'\r\nimport './MainPage.css'\r\nimport {NavLink} from 'react-router-dom';\r\nimport {fetchData} from '../redux/action/requestAction';\r\nimport {openMes} from '../redux/action/messageAction'\r\n\r\nimport {connect} from 'react-redux';\r\n\r\n class MainPage extends Component {\r\n    componentDidMount () {\r\n        // axios.get('http://content.guardianapis.com/search?api-key=test')\r\n        //   .then(data => console.log(data))\r\n        //   .catch(err=> console.log(err))\r\n        this.props.fetch();\r\n        // this.props.openMes()\r\n        console.log('asasa')\r\n      }\r\n      showPosts = (event) => {\r\n        let id=event.target.id\r\n        this.props.openMes(id)\r\n        // this.props.clearValue()\r\n        console.log(id)\r\n      }\r\n  render() {\r\n    return (\r\n        <div >\r\n        { this.props.blog.length === 0 ? <div>Loading</div> :\r\n                  <div className='wrap'>\r\n                    { this.props.blog.map(el => \r\n                      <div className='card'  key={el.title}>\r\n  \r\n                          <h3>{el.title}</h3>\r\n                          <h5>{el.userName}</h5>\r\n                          <p>{el.body}</p>\r\n                            <p>{el.author}</p>\r\n                            <p>{el.date}</p>    \r\n                            <NavLink  to={`/post/:${el.id}`} ><p id={el.id} className='viePost' onClick={this.showPosts}>View messenge</p></NavLink>\r\n                          </div>)\r\n                    }\r\n          \r\n        </div>\r\n        \r\n      \r\n      \r\n        }\r\n        </div>\r\n      \r\n                    \r\n      \r\n    )\r\n  }\r\n}\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        blog: state.blog,\r\n        message:state.message\r\n    }\r\n  }\r\n\r\nMainPage.protoTypes = {\r\n\r\n}\r\n  \r\n  function mapDispatchToProps (dispatch) {\r\n    return {\r\n        fetch: function() {\r\n          dispatch(fetchData())\r\n        },\r\n        openMes: function(id) {\r\n            dispatch(openMes(id))\r\n          },\r\n     \r\n        // clearValue: function() {\r\n        //   dispatch(clearValue())\r\n        // },\r\n        // findPosts: function(blog, text) {\r\n        //   dispatch(findPosts(blog, text))\r\n        // },\r\n        // cleanPaint: function() {\r\n        //   dispatch(cleanPaint())\r\n        // }\r\n    }\r\n  }\r\n  \r\n  export default connect( mapStateToProps, mapDispatchToProps) ( MainPage)","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport './Мessage.css'\r\nimport{pushComment} from '../redux/action/messageAction';\r\nimport  uuid4 from 'uuid4'\r\nimport {NavLink} from 'react-router-dom';\r\nclass Messenge extends Component {\r\n    state={\r\n        isLoading:true,\r\n        value:'',\r\n        Load:true\r\n    }\r\n    componentDidMount(){\r\n        console.log(this.props.message)\r\n        if(this.props.message) {\r\n            this.setState({\r\n                Load:false,\r\n            })\r\n        }\r\n    }\r\n    showComment=()=>{\r\n        this.setState(prev=>({\r\n            isLoading:!prev.isLoading\r\n        }))\r\n    }\r\n    handelChange=(ev)=>{\r\n        ev.preventDefault();\r\n        this.setState({value: ev.target.value});\r\n    }\r\n    addCommet=(ev)=>{\r\n        ev.preventDefault();\r\n        let val=this.state.value\r\n    \r\n       let pop=new Date();\r\n       let newDate=pop.toLocaleString()\r\n       console.log(String(pop))\r\n       console.log(String(newDate))\r\n        let comment={body:val,\r\n                        date: String(newDate),\r\n                    id:String(newDate)}\r\n        console.log(comment);\r\n        this.props.comments(comment);\r\n        this.setState({value: ''});\r\n    }\r\n    openArea=()=>{\r\n\r\n    }\r\n    render() {\r\n        const{isLoading,Load,value}=this.state\r\n        return (\r\n            \r\n            <div>\r\n                {Load ? <p>LOading</p> :\r\n                // {console.log(this.props.message)}\r\n                <div className='wrap'>\r\n                      <div className='cardPost'  key={this.props.message.title}>\r\n                      <NavLink to='/' > <button className='btn'>Latest Posts</button></NavLink>\r\n  \r\n                          <h3>{this.props.message.title}</h3>\r\n                          <h5>{this.props.message.userName}</h5>\r\n                          <p>{this.props.message.body}</p>\r\n                            <p>{this.props.message.author}</p>\r\n                            <p>{this.props.message.date}</p>\r\n                            <div>\r\n                            <p className='openComents' onClick={this.showComment}> Open comments </p>\r\n                            { isLoading ? null:\r\n                            this.props.message.comments.map(el=> <div key={uuid4()} className='coments'><p>{el.body}</p><p className='date'>{el.date}</p></div>)}\r\n                            </div>\r\n                         \r\n                             <form action=\"\">\r\n                            <textarea name=\"\" id=\"\" cols=\"30\" rows=\"10\" onChange={this.handelChange} value={value}  ></textarea>\r\n                            <button className='btnAdd' onClick={this.addCommet} >Add commit</button>\r\n                            </form>\r\n                           \r\n                          </div>\r\n                         \r\n                        \r\n                          </div>\r\n                }\r\n                </div>\r\n        );\r\n    }\r\n}\r\nfunction mapStateToProps (state) {\r\n    return {\r\n        blog: state.blog,\r\n        message:state.message\r\n    }\r\n  }\r\n  function mapDispatchToProps (dispatch) {\r\n    return {\r\n        comments: function(comment) {\r\n            dispatch(pushComment(comment))\r\n          },\r\n    }}\r\nexport default connect( mapStateToProps, mapDispatchToProps) (Messenge);","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport {Switch, Route, withRouter} from 'react-router-dom';\r\nimport MainPage from './MainPage/MainPage';\r\nimport Мessage from './Мessage/Мessage';\r\n\r\n\r\n\r\nclass App extends Component {\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n \r\n       <Switch>\r\n         <Route exact path='/Blog_zdec/' component={MainPage}/>\r\n       \r\n         <Route path={`/Blog_zdec//post/:id`} component={Мessage}/> \r\n         \r\n       </Switch>\r\n      </div>\r\n    \r\n                  \r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default   withRouter (App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport store from './redux/store/store'\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport {Provider} from 'react-redux'\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Provider store={store}>\r\n        <BrowserRouter>\r\n            <App />\r\n        </BrowserRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}